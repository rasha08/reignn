{"version":3,"sources":["store/data/types.ts","store/data/actions.ts","consts/Routes.ts","store/auth/actions.ts","routes.tsx","App.tsx","serviceWorker.ts","consts/StorageKeys.ts","util/browserStorage.ts","store/auth/reducer.ts","environment.ts","store/auth/saga.ts","store/data/reducer.ts","store/data/saga.ts","store/index.ts","index.tsx","store/auth/types.ts"],"names":["SET_DATA_SET","SET_DATA","SET_DATA_ERROR","setDatasetAction","dataset","type","payload","setDataAction","data","setDataErrorAction","error","Routes","loginUserAction","user","password","LOGIN_USER","User","Password","setUserAuthStatus","status","SET_USER_AUTH_STATUS","setAuthErrorAction","SET_AUTH_ERROR","routes","mount","home","lazy","login","App","store","useSelector","s","useEffect","console","log","fallback","Boolean","window","location","hostname","match","StorageKeys","get","key","value","sessionStorage","getItem","JSON","parse","_","Token","initialState","authorized","loading","Environment","process","loginUser","loginUserSaga","action","axios","post","token","setItem","put","message","takeLatest","getDatasetData","dataSaga","Date","now","headers","res","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","auth","state","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.80933767.chunk.js","sourcesContent":["import {DataSetName} from \"../../consts/DataSetName\";\n\nexport const SET_DATA_SET = 'SET_DATA_SET'\nexport const SET_DATA = 'SET_DATA'\nexport const SET_DATA_ERROR = 'SET_DATA_ERROR'\n\nexport type DataState<T = unknown> = {\n  dataset: DataSetName | null;\n  data: T;\n  error: string | null;\n  loading: boolean\n}\n\n\nexport type SetDatasetAction = {\n  type: typeof SET_DATA_SET,\n  payload: DataSetName | null\n}\n\n\nexport type SetDataErrorAction = {\n  type: typeof SET_DATA_ERROR,\n  payload: string | null\n}\n\nexport type SetDataAction = {\n  type: typeof SET_DATA;\n  payload: unknown\n}\n\nexport type KPIData = {\n  title: string\n  value: string\n}\n\nexport type QualityData = {\n  adQuality: number;\n  filteredByAttribute: { attribute: string; unwantedRatio: number }[];\n  filteredByDemandSource: { demandSource: string; unwantedRatio: number }[]\n  unwantedAds: number\n}\n\nexport type ChartData = {\n  dataId: number;\n  dataset: {\n    controlData: number[];\n    data: number[]\n  },\n  labels: string[];\n  title: string\n}\n\nexport type DataAction = SetDatasetAction | SetDataErrorAction | SetDataAction\n\nexport type DataReducer = (state: DataState, action: DataAction) => DataState\n","import {SET_DATA, SET_DATA_ERROR, SET_DATA_SET, SetDataAction, SetDataErrorAction, SetDatasetAction,} from \"./types\";\nimport {DataSetName} from \"../../consts/DataSetName\";\n\nexport const setDatasetAction: (dataset: DataSetName|null) => SetDatasetAction = (dataset) => ({\n  type: SET_DATA_SET,\n  payload: dataset\n})\n\nexport const setDataAction: (data: unknown) => SetDataAction = data => ({\n  type: SET_DATA,\n  payload: data\n})\n\nexport const setDataErrorAction: (error?: string | null ) => SetDataErrorAction = error => ({\n  type: SET_DATA_ERROR,\n  payload: error || null\n})\n","export enum Routes {\n  home= '/reignn',\n  login = '/reignn/login',\n}\n","import {\n  LOGIN_USER,\n  LoginAction,\n  SET_AUTH_ERROR,\n  SET_USER_AUTH_STATUS,\n  SetAuthErrorAction,\n  SetUserAuthStatusAction\n} from \"./types\";\n\nexport const loginUserAction: (user: string, password: string) => LoginAction = (user, password) => ({\n  type: LOGIN_USER,\n  payload: {\n    User: user,\n    Password: password\n  }\n})\n\nexport const setUserAuthStatus: (status: boolean) => SetUserAuthStatusAction = status => ({\n  type: SET_USER_AUTH_STATUS,\n  payload: status\n})\n\nexport const setAuthErrorAction: (error?: string | null ) => SetAuthErrorAction = error => ({\n  type: SET_AUTH_ERROR,\n  payload: error || null\n})\n","import {lazy, mount} from \"navi\";\n\nimport {Routes} from \"./consts/Routes\";\n\nexport const routes = mount({\n  [Routes.home]: lazy(() => import('./pages/Data')),\n  [Routes.login]: lazy(() => import('./pages/Login')),\n})\n","import React, { useEffect, Suspense } from 'react';\nimport {useSelector} from \"react-redux\";\nimport { Router, View } from 'react-navi'\nimport {routes} from \"./routes\";\n\nexport const App = () => {\n  const store = useSelector(s => s)\n\n  useEffect(() => {\n    console.log(store)\n  }, [store])\n\n  return (\n    <Router routes={routes} >\n      <Suspense fallback={'Loading...'}>\n        <View />\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum StorageKeys {\n  Token = 'Token'\n}\n","export const store = (key: string, value: string) => sessionStorage.setItem(key, value)\nexport const get = (key: string) => {\n const value = sessionStorage.getItem(key)\n  if (!value) {\n    return\n  }\n\n  try {\n   return JSON.parse(value)\n  } catch (_) {\n    return value\n  }\n}\n\nexport const remove = (key: string) => sessionStorage.removeItem(key)\n","import {AuthReducer, AuthState, LOGIN_USER, SET_AUTH_ERROR, SET_USER_AUTH_STATUS} from \"./types\";\nimport {get} from \"../../util/browserStorage\";\nimport {StorageKeys} from \"../../consts/StorageKeys\";\n\nconsole.log(!!get(StorageKeys.Token), get(StorageKeys.Token))\nconst initialState: AuthState = {\n  authorized: !!get(StorageKeys.Token),\n  error: null,\n  loading: false\n}\n\nexport const authReducer: AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_USER:\n      return { ...state, loading: true, error: null }\n    case SET_USER_AUTH_STATUS:\n      return { ...state, authorized: action.payload, loading: false }\n    case SET_AUTH_ERROR:\n      return { ...state, loading:false, error: action.payload  }\n    default:\n      return state\n  }\n}\n","type Environment = {\n  ApiUrl: string\n}\n\nexport const Environment: Environment = {\n  ApiUrl: process.env.REACT_APP_API_URL as string\n}\n","import { put, takeLatest } from 'redux-saga/effects'\nimport { Environment } from '../../environment';\nimport axios from 'axios'\n\nimport {LOGIN_USER, LoginAction} from \"./types\";\nimport {setAuthErrorAction, setUserAuthStatus} from \"./actions\";\nimport {store} from \"../../util/browserStorage\";\nimport {StorageKeys} from \"../../consts/StorageKeys\";\n\nconst AUTH_ENDPOINT = 'login'\n\nfunction* loginUser(action: LoginAction) {\n  try {\n    const user = yield axios.post(`${Environment.ApiUrl}/${AUTH_ENDPOINT}`, action.payload)\n    store(StorageKeys.Token, user.data.token)\n    yield put(setUserAuthStatus(!!user.data.token));\n  } catch (e) {\n    yield put(setAuthErrorAction(e.message));\n  }\n}\n\nexport function* loginUserSaga() {\n  yield takeLatest(LOGIN_USER, loginUser);\n}\n","import {DataState, DataReducer, SET_DATA, SET_DATA_ERROR, SET_DATA_SET} from \"./types\";\n\nconst initialState: DataState = {\n  dataset: null,\n  data: null,\n  error: null,\n  loading: false\n}\n\nexport const dataReducer: DataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_DATA_SET:\n      return { ...state, loading: true, error: null, dataset: action.payload }\n    case SET_DATA:\n      return { ...state, data: action.payload, loading: false }\n    case SET_DATA_ERROR:\n      return { ...state, loading:false, error: action.payload  }\n    default:\n      return state\n  }\n}\n","import { put, takeLatest } from 'redux-saga/effects'\nimport { Environment } from '../../environment';\nimport axios from 'axios'\n\nimport {SET_DATA_SET, SetDatasetAction} from \"./types\";\nimport {setDataErrorAction, setDataAction} from \"./actions\";\nimport {get} from \"../../util/browserStorage\";\nimport {StorageKeys} from \"../../consts/StorageKeys\";\n\nfunction* getDatasetData(action: SetDatasetAction) {\n  if (!action.payload) {\n    return yield put(setDataAction(null))\n  }\n\n  const offset = (24*60*60*1000) * 7\n\n  try {\n    const res = yield axios.get(\n      `${Environment.ApiUrl}/${action.payload}?dateFrom=${Date.now() - offset}&dateTo=${Date.now()}&site_id=1`,\n      { headers: {'Authorization': `Bearer ${get(StorageKeys.Token)}` } }\n      )\n    yield put(setDataAction(res.data));\n  } catch (e) {\n    yield put(setDataErrorAction(e.message));\n  }\n}\n\nexport function* dataSaga() {\n  yield takeLatest(SET_DATA_SET, getDatasetData);\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport { authReducer } from './auth/reducer'\nimport { loginUserSaga } from './auth/saga'\nimport {AuthState} from \"./auth/types\";\nimport {dataReducer} from \"./data/reducer\";\nimport {DataState} from \"./data/types\";\nimport {dataSaga} from \"./data/saga\";\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport type StoreState = {\n  auth: AuthState,\n  data: DataState\n}\n\nexport const store = createStore(\n  combineReducers({ auth: authReducer, data: dataReducer }),\n  applyMiddleware(sagaMiddleware)\n)\n\nsagaMiddleware.run(loginUserSaga)\nsagaMiddleware.run(dataSaga)\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport {store} from \"./store\";\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const LOGIN_USER = 'LOGIN_USER'\nexport const SET_USER_AUTH_STATUS = 'SET_USER_AUTH_STATUS'\nexport const SET_AUTH_ERROR = 'SET_AUTH_ERROR'\n\nexport type AuthState = {\n  authorized: boolean;\n  error: string | null;\n  loading: boolean\n}\n\nexport type LoginActionPayload = {\n  User: string;\n  Password: string;\n}\n\n\nexport type LoginAction = {\n  type: typeof LOGIN_USER,\n  payload: LoginActionPayload\n}\n\n\nexport type SetAuthErrorAction = {\n  type: typeof SET_AUTH_ERROR,\n  payload: string | null\n}\n\nexport type SetUserAuthStatusAction = {\n  type: typeof SET_USER_AUTH_STATUS;\n  payload: boolean\n}\n\nexport type AuthAction = SetUserAuthStatusAction | LoginAction | SetAuthErrorAction\n\nexport type AuthReducer = (state: AuthState, action: AuthAction) => AuthState\n"],"sourceRoot":""}